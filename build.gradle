
plugins {
	id "com.jfrog.bintray" version "1.2"
	id "com.diffplug.gradle.spotless" version "3.1.0"
	id "de.undercouch.download" version "3.4.3"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'


// Master gradle file:
apply from: 'https://github.com/ClearControl/master/blob/master/master.gradle?raw=true'

//***********************************************************************************
// JAVA CODE BUILDING

sourceSets
{
	main
	{
		java
		{ srcDir 'src/java' }
    resources
		{ srcDir 'src/java' }
	}
	test
	{
		java
		{ srcDir 'src/java' }
    resources
		{ srcDir 'src/java' }
	}
}


sourceCompatibility = 1.8
targetCompatibility = 1.8


test
{
	testLogging.showStandardStreams = true
	testLogging
	{ events "passed", "skipped", "failed" }

	exclude '**/demo/**'
	exclude '**/run/**'

	maxHeapSize = "4G"
}



dependencies
{

	// CoreMem:
	compile ('net.coremem:coremem:'+project.ext.versionsMap["coremem"])  {transitive= true; changing= true}
	
	// JAVACL Backend:
	compile ('com.nativelibs4java:javacl:1.0.0-RC4') {transitive= true; changing= false}
		
	// JOCL backend:
	compile ('org.jocl:jocl:2.0.1') {transitive= true; changing= false}
	
	// Vecmath:
    compile ('javax.vecmath:vecmath:1.5.2')

	// Bioformats
	compile(group: 'ome', name: 'formats-api', version: '5.5.3')
	compile(group: 'ome', name: 'formats-bsd', version: '5.5.3')

	// Junit:
	compile group: 'junit', name: 'junit', version: '4.12'
	testCompile group: 'junit', name: 'junit', version: '4.12'
}

repositories
{
	mavenCentral()
	maven { url "http://oss.sonatype.org/content/groups/public" }
	maven { url "http://dl.bintray.com/clearcontrol/ClearControl" }
	maven { url "https://mvnrepository.com/artifact/org.jocl/jocl"}
	maven { url "https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases" }
	maven { url "http://artifacts.openmicroscopy.org/artifactory/maven/"}
}



task sourcesJar(type: Jar, dependsOn:classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}


//***********************************************************************************
// PUBLISHING

group   = project.ext.groupname
version = project.ext.versionsMap[project.name]

artifacts
{
	archives sourcesJar
	archives javadocJar
}

publishing {
	publications {
		maven(MavenPublication) {
			from components.java
			artifact sourcesJar { classifier "sources" }
		}
	}
}













